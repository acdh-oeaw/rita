xquery version "3.0";

module namespace app="http://www.digital-archiv.at/ns/rita/templates";
declare namespace repo="http://exist-db.org/xquery/repo";


import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://www.digital-archiv.at/ns/rita/config" at "config.xqm";
import module namespace kwic = "http://exist-db.org/xquery/kwic" at "resource:org/exist/xquery/lib/kwic.xql";

declare namespace tei="http://www.tei-c.org/ns/1.0";
declare namespace functx = "http://www.functx.com";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:list-all-books ($node as node(), $model as map (*), $query as xs:string?) {
for $bookrow in collection(concat($config:app-root, '/data/editions/'))//tei:bibl[string-length(./text()) gt 8]
let $doc := document-uri(root($bookrow))
let $id := data($bookrow/ancestor::tei:TEI/@xml:id)
let $header := $bookrow/ancestor::tei:TEI//tei:teiHeader
let $idno := $header//tei:msIdentifier//tei:idno
let $bestand := $header//tei:msIdentifier//tei:collection

order by $doc
return
    <tr>
        <td>{$bookrow}</td>
        <td>
            <a href="{app:hrefToDoc(root($bookrow))}">{for $x in $bestand return concat($x, " ")}{$idno}</a></td>
    </tr>
};


declare function app:number-of-all-inventories ($node as node(), $model as map (*), $query as xs:string?) {
let $allrows: = count(doc(concat($config:app-root, '/data/other/summary.xml'))//tei:row[position() gt 1])
let $rows := count(doc(concat($config:app-root, '/data/other/summary.xml'))//tei:row[position() gt 1 and contains(./tei:cell[3],'fehlt')])
return $allrows - $rows - 1
};

declare function app:summary ($node as node(), $model as map (*), $query as xs:string?) {
for $row in doc(concat($config:app-root, '/data/other/summary.xml'))//tei:row[position() gt 1]
    return
        <tr>
            <td>
            {if(contains($row//tei:cell[11],"j")) 
                then <strong><a href="toc.html">{$row//tei:cell[1]}</a></strong> 
                else $row//tei:cell[1]}
            </td>
            <td>{$row//tei:cell[2]}</td>
            <td>{$row//tei:cell[3]}</td>
            <td>{$row//tei:cell[4]}</td>
            <td>{$row//tei:cell[5]}</td>
            <td>{$row//tei:cell[6]}</td>
            <td>{$row//tei:cell[7]}</td>
            <td>{$row//tei:cell[8]}</td>
            <td>{$row//tei:cell[9]}</td>
            <td>{$row//tei:cell[10]}</td>
            <td>{$row//tei:cell[11]}</td>
        </tr>
};

(:~
 : grabs the text stored in the repo.xml in the repo:description element.
 :)
declare function app:description($node as node(), $model as map(*)) {
    doc(concat($config:app-root, "/repo.xml"))//repo:description/text()
};


(:~
 : see http://www.xqueryfunctions.com/xq/functx_substring-after-last.html
 :)
declare function functx:substring-after-last
  ( $arg as xs:string? ,
    $delim as xs:string )  as xs:string {
   replace ($arg,concat('^.*',$delim),'')
 };
 
(:~
: returns the name of the document of the node passed to this function.
:)
declare function app:getDocName($node as node()){
let $name := functx:substring-after-last(document-uri(root($node)), '/')
    return $name
};

(:~
 : href to document.
 :)
declare function app:hrefToDoc($node as node()){
let $name := functx:substring-after-last($node, '/')
let $href := concat('show.html','?document=', app:getDocName($node))
    return $href
};


(:~
 : a fulltext-search function
 :)
 declare function app:ft_search($node as node(), $model as map (*)) {
 if (request:get-parameter("searchexpr", "") !="") then
 let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
 for $hit in collection(concat($config:app-root, '/data/editions/'))//tei:p[ft:query(.,$searchterm)]
    let $href := app:hrefToDoc($hit)
    let $score as xs:float := ft:score($hit)
    order by $score descending
    return
    <tr>
        <td>{$score}</td>
        <td>{kwic:summarize($hit, <config width="40" link="{$href}" />)}</td>
        <td>{app:getDocName($hit)}</td>
    </tr>
 else
    <div>Nothing to search for</div>
 };

(:~
: lists all documents which contain persons identiefied in searchkey paramter
:)
declare function app:listPers_hits($node as node(), $model as map(*), $searchkey as xs:string?, $path as xs:string?)
{
    for $hit in collection(concat($config:app-root, '/data/editions/'))//tei:TEI[.//tei:persName[@key=$searchkey] |.//tei:rs[@ref=concat("#",$searchkey)] |.//tei:rs[@key=contains(./@key,$searchkey)]] 
    return
    <li><a href="{app:hrefToDoc($hit)}">{app:getDocName($hit)}</a></li>   
 };
 
 (:~
 : creates a basic index of persons derived from the document stored in '/data/indieces/personlist.xml'
 :)
declare function app:listPers($node as node(), $model as map(*)) {
    let $hitHtml := "hits.html?searchkey="
    for $person in doc(concat($config:app-root, '/data/indices/personlist.xml'))//tei:listPerson/tei:person
        return
        <li><a href="{concat($hitHtml,data($person/@xml:id))}">{$person/tei:persName}</a></li>
};

 (:~
 : creates a basic index of places derived from the document stored in '/data/indieces/placelist.xml'
 :)
declare function app:listPlace($node as node(), $model as map(*)) {
    let $hitHtml := "hits.html?searchkey="
    for $place in doc(concat($config:app-root, '/data/indices/placelist.xml'))//tei:listPlace/tei:place
        return
        <li><a href="{concat($hitHtml,data($place/@xml:id))}">{$place/tei:placeName}</a></li>
};

(:~
 : creates a basic table of content derived from the documents stored in '/data/editions'
 :)
declare function app:toc($node as node(), $model as map(*)) {
    for $doc in collection(concat($config:app-root, '/data/editions/'))//tei:TEI
    let $dokumenttyp := $doc//tei:msContents/tei:p[1]
    let $time := data($doc//tei:history//tei:date/@when-iso)
    let $place := $doc//tei:history//tei:origPlace
    let $deadperson := $doc//tei:rs[@type='person'][1]
    
        return
        <tr>
            <td>
                <a href="{app:hrefToDoc($doc)}">{app:getDocName($doc)}</a>
            </td>
            <td>{$dokumenttyp}</td>
            <td>{$time}</td>
            <td>{$place}</td>
            <td>{$deadperson}</td>
        </tr>   
};

(:~
 : perfoms an XSLT transformation
 :)
declare function app:XMLtoHTML ($node as node(), $model as map (*), $query as xs:string?) {
let $ref := xs:string(request:get-parameter("document", ""))
let $xml := doc(replace(concat($config:app-root,"/data/editions/",$ref), '/exist/', '/db/'))
let $xsl := doc(concat($config:app-root, "/resources/xslt/xmlToHtml.xsl"))
let $params := 
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>
return 
    transform:transform($xml, $xsl, $params)
};

declare function app:number-of-inventories ($node as node(), $model as map (*), $query as xs:string?) {
let $all := collection(concat($config:app-root, '/data/editions/'))//tei:TEI
let $inventories := count($all)-count(collection('/db/apps/buchbesitz-collection/xml/other'))
return 
   $inventories
};