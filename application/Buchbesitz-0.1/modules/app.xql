xquery version "3.0";

module namespace app="http://digital-archiv.at:8081/exist/apps/buchbesitz/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://digital-archiv.at:8081/exist/apps/buchbesitz/config" at "config.xqm";

declare namespace tei="http://www.tei-c.org/ns/1.0";

declare variable $app:pathToView := concat("http://",request:get-server-name(),":",request:get-server-port(), request:get-effective-uri());
declare variable $app:collection := replace($app:pathToView, "modules/view.xql", "");
declare variable $app:xmlCollection := replace(concat($app:collection, "xml/"), "http://digital-archiv.at:8081/exist/rest", "");
declare variable $app:uri := request:get-effective-uri();
declare variable $app:pathToShow := concat(replace($app:collection, "rest/db/", ""), "show/");


(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare function app:summary ($node as node(), $model as map (*), $query as xs:string?) {

let $xml := doc(concat(concat($app:collection,"xml/other/"),"summary.xml"))
let $xsl := doc(concat(concat($app:collection,"xslt/"),"summary.xsl"))
let $params := 
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("xml","xsl"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>
     return
    transform:transform($xml, $xsl, $params)
};

declare function app:list-all-books ($node as node(), $model as map (*), $query as xs:string?) {
for $bookrow in collection('/db/apps/buchbesitz-collection/xml')//tei:bibl[string-length(./text()) gt 8]
let $doc := document-uri(root($bookrow))
let $id := data($bookrow/ancestor::tei:TEI/@xml:id)
order by $doc
return
    <tr>
        <td>{$bookrow}</td>
        <td><a href="{concat($app:pathToShow, $id)}">{$id}</a></td>
    </tr>
};

declare function app:number-of-books ($node as node(), $model as map (*), $query as xs:string?) {
let $all := collection('/db/apps/buchbesitz-collection/xml/')//tei:row[.//tei:bibl]
return 
    count($all)
};

declare function app:number-of-inventories ($node as node(), $model as map (*), $query as xs:string?) {
let $all := collection('/db/apps/buchbesitz-collection/xml/')/tei:TEI
let $inventories := count($all)-count(collection('/db/apps/buchbesitz-collection/xml/other'))
return 
   $inventories
};

declare function app:number-of-all-inventories ($node as node(), $model as map (*), $query as xs:string?) {
let $allrows: = count(doc(concat($app:xmlCollection, 'other/summary.xml'))//tei:row[position() gt 1])
let $rows := count(doc(concat($app:xmlCollection, 'other/summary.xml'))//tei:row[position() gt 1 and contains(./tei:cell[3],'fehlt')])
return $allrows - $rows
};

declare function app:summary ($node as node(), $model as map (*), $query as xs:string?) {
for $row in doc(concat($app:xmlCollection, 'other/summary.xml'))//tei:row[position() gt 1]
    return
        <tr>
            <td>
            {if(contains($row//tei:cell[11],"j")) 
                then <a href="http://digital-archiv.at:8081/exist/apps/buchbesitz-collection/inhalt">{$row//tei:cell[1]}</a> 
                else $row//tei:cell[1]}
            </td>
            <td>{$row//tei:cell[2]}</td>
            <td>{$row//tei:cell[3]}</td>
            <td>{$row//tei:cell[4]}</td>
            <td>{$row//tei:cell[5]}</td>
            <td>{$row//tei:cell[6]}</td>
            <td>{$row//tei:cell[7]}</td>
            <td>{$row//tei:cell[8]}</td>
            <td>{$row//tei:cell[9]}</td>
            <td>{$row//tei:cell[10]}</td>
            <td>{$row//tei:cell[11]}</td>
        </tr>
};


declare function app:bestandsuebersicht ($node as node(), $model as map (*), $query as xs:string?) {
let $collection := $app:xmlCollection (:/db/apps/buchbesitz-collection/xml/:) 
for $header in collection($collection)//tei:teiHeader
    let $id := data($header/ancestor::tei:TEI/@xml:id)
    let $repository := $header//tei:msIdentifier//tei:repository/text()
    let $bestand := $header//tei:msIdentifier//tei:collection
    let $idno := $header//tei:msIdentifier//tei:idno
    let $dokumenttyp := $header//tei:msContents/tei:p[1]
    let $time := data($header//tei:history//tei:date/@when-iso)
    let $place := $header//tei:history//tei:origPlace
    let $deadperson := $header//tei:rs[@type='person'][1]
    return
<tr>
        <td>
        <a href="{concat($app:pathToShow, $id)}"> 
        {for $x in $bestand return concat($x, " ")}{$idno}</a></td>
        <td>{$dokumenttyp}</td>
        <td>{$time}</td>
        <td>{$place}</td>
        <td>{$deadperson}</td>       
</tr>
};

declare function app:XMLtoHTML ($node as node(), $model as map (*), $query as xs:string?) {
let $ref := xs:string(request:get-parameter("ref", ""))
return
if ($ref ="")
    then <div><h3 style="text-align:center">Bitte w√§hlen Sie ein Dokument aus!</h3></div>
    else
let $doc := xs:string(concat(concat($app:collection,"xml/"), $ref))
let $xml := doc($doc)
let $xsl := doc(concat(concat($app:collection,"xslt/"),"xmlToHtml.xsl"))
let $params := 
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("xml","xsl"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>
     return
    transform:transform($xml, $xsl, $params)
};
